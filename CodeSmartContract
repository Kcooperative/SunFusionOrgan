//# SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;

//# Import necessary contracts and libraries
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

//# Define the main contract
contract SunFusionOrgan is ERC721Enumerable, Ownable {
    using SafeMath for uint256;

    //# Define the structure for each nuclear fusion causal project
    struct Project {
        string name;
        string description;
        uint256 requiredFunds;
        uint256 progress;
        uint256 successCriteria;
        address creator;
        bool active;
    }

    //# Public mappings to store project data
    mapping(uint256 => Project) public projects;
    mapping(uint256 => uint256) public projectInvestments;
    mapping(uint256 => address[]) public projectInvestors;
    mapping(uint256 => uint256) public projectTiers;

    //# Track the current project and tier IDs
    uint256 public currentProjectId;
    uint256 public currentTier;

    //# Define the initial supply and token details
    uint256 public constant INITIAL_SUPPLY = 1000000;
    string public constant TOKEN_NAME = "SunFusionOrgan";
    string public constant TOKEN_SYMBOL = "SFO";

    //# Reputation system: Mapping of user addresses to their reputation score
    mapping(address => uint256) public userReputation;

    //# List of investors
    address[] public investors;

    //# Define the structure for project proposals
    struct Proposal {
        string description;
        address proposer;
        uint256 votes;
        bool executed;
    }

    //# Public mapping to store project proposals
    mapping(uint256 => Proposal[]) public projectProposals;

    //# Events to log important contract actions
    event ProjectRegistered(uint256 projectId, string name);
    event Investment(uint256 projectId, address investor, uint256 amount);
    event ProfitDistributed(uint256 projectId, uint256 amount);
    event ProjectProposalCreated(uint256 projectId, string description);
    event ProjectProposalVoted(uint256 projectId, bool vote);

    //# Modifier to restrict access to project creators
    modifier onlyProjectCreator(uint256 projectId) {
        require(
            projects[projectId].creator == msg.sender,
            "Only the project creator can call this function."
        );
        _;
    }

    //# Contract constructor to mint the initial supply of tokens
    constructor() ERC721(TOKEN_NAME, TOKEN_SYMBOL) {
        _mint(msg.sender, INITIAL_SUPPLY);
    }

    //# Function to register a new fusion project
    function registerProject(
        string memory _name,
        string memory _description,
        uint256 _requiredFunds,
        uint256 _successCriteria
    ) external {
        uint256 projectId = currentProjectId;
        projects[projectId] = Project({
            name: _name,
            description: _description,
            requiredFunds: _requiredFunds,
            progress: 0,
            successCriteria: _successCriteria,
            creator: msg.sender,
            active: true
        });

        currentProjectId++;
        projectTiers[projectId] = currentTier;
        emit ProjectRegistered(projectId, _name);
    }

    //# Function to allow investment in a project
    function investInProject(uint256 _projectId, uint256 _tier) external payable {
        Project storage project = projects[_projectId];
        require(project.creator != address(0), "Project does not exist");
        require(msg.value > 0, "Investment amount must be greater than 0");
        require(project.active, "Project is not active");

        require(
            projectTiers[_projectId] == _tier,
            "Investor does not belong to this tier"
        );

        project.progress = project.progress.add(msg.value);
        projectInvestments[_projectId] = projectInvestments[_projectId].add(
            msg.value
        );
        projectInvestors[_projectId].push(msg.sender);
        investors.push(msg.sender);

        userReputation[msg.sender] = userReputation[msg.sender].add(msg.value);

        emit Investment(_projectId, msg.sender, msg.value);
    }

    //# Function to check if a project has met its success criteria
    function hasProjectMetCriteria(uint256 _projectId) public view returns (bool) {
        Project storage project = projects[_projectId];
        return project.progress >= project.successCriteria;
    }

    //# Function to distribute profits to NFT holders of a successful project
    function distributeProfits(uint256 _projectId) external onlyProjectCreator(_projectId) {
        Project storage project = projects[_projectId];
        require(hasProjectMetCriteria(_projectId), "Project has not met success criteria");

        uint256 totalInvestment = projectInvestments[_projectId];
        uint256 numInvestors = projectInvestors[_projectId].length;

        if (numInvestors > 0
